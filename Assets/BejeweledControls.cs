//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/BejeweledControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Bejeweled
{
    public partial class @BejeweledControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @BejeweledControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""BejeweledControls"",
    ""maps"": [
        {
            ""name"": ""BejeweledActionMap"",
            ""id"": ""ea1534f4-2a16-4cf9-8c7a-e901225d2536"",
            ""actions"": [
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Value"",
                    ""id"": ""c759c1ab-aa3c-4412-97f9-f8db85bf7bef"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6ca5227d-e71c-452a-b1d4-1c36dbf2c7e5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // BejeweledActionMap
            m_BejeweledActionMap = asset.FindActionMap("BejeweledActionMap", throwIfNotFound: true);
            m_BejeweledActionMap_MouseClick = m_BejeweledActionMap.FindAction("MouseClick", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // BejeweledActionMap
        private readonly InputActionMap m_BejeweledActionMap;
        private List<IBejeweledActionMapActions> m_BejeweledActionMapActionsCallbackInterfaces = new List<IBejeweledActionMapActions>();
        private readonly InputAction m_BejeweledActionMap_MouseClick;
        public struct BejeweledActionMapActions
        {
            private @BejeweledControls m_Wrapper;
            public BejeweledActionMapActions(@BejeweledControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @MouseClick => m_Wrapper.m_BejeweledActionMap_MouseClick;
            public InputActionMap Get() { return m_Wrapper.m_BejeweledActionMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BejeweledActionMapActions set) { return set.Get(); }
            public void AddCallbacks(IBejeweledActionMapActions instance)
            {
                if (instance == null || m_Wrapper.m_BejeweledActionMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_BejeweledActionMapActionsCallbackInterfaces.Add(instance);
                @MouseClick.started += instance.OnMouseClick;
                @MouseClick.performed += instance.OnMouseClick;
                @MouseClick.canceled += instance.OnMouseClick;
            }

            private void UnregisterCallbacks(IBejeweledActionMapActions instance)
            {
                @MouseClick.started -= instance.OnMouseClick;
                @MouseClick.performed -= instance.OnMouseClick;
                @MouseClick.canceled -= instance.OnMouseClick;
            }

            public void RemoveCallbacks(IBejeweledActionMapActions instance)
            {
                if (m_Wrapper.m_BejeweledActionMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IBejeweledActionMapActions instance)
            {
                foreach (var item in m_Wrapper.m_BejeweledActionMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_BejeweledActionMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public BejeweledActionMapActions @BejeweledActionMap => new BejeweledActionMapActions(this);
        public interface IBejeweledActionMapActions
        {
            void OnMouseClick(InputAction.CallbackContext context);
        }
    }
}
